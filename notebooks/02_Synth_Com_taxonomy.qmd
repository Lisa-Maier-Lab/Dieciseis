---
title: "Taxonomic classify synthetic communities"
format: html
---

# Aim

Jacobo de la Cuesta-Zuluaga. December 2023.

This is the second notebook of the Maier Lab's 16S rRNA amplicon sequencing workflow.
*Note* that is only needed if you are processing the sequences of a synthetic community such as EED or Com20. If you are processing complex samples, e.g. human feces, you don't need to run this notebook.

In the last notebook we processed the raw sequences, genertated ASVs and performed
a general taxonomic classification. Here we will use full-length references to
classify the sequences of each member of the synthetic community and collapse the
abundance according to the taxonomic classification by species.

# Libraries

The following libraries are required for the present workflow

```{r}
library(tidyverse)
library(Biostrings)
library(DECIPHER)
library(ape)
library(conflicted)
```

```{r}
# Load helper functions
source("../bin/Helper_functions.R")
```

```{r}
# Solve conflics with certain function names
conflict_prefer("filter", "dplyr")
conflict_prefer("slice", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("setdiff", "base")
```

# Load files
The input files required to execute this notebook are the abundance and taxonomy
tables of the detected ASVs that were generated using `DADA2` in the first notebook.

Make sure to adapt the paths to the output directory as needed.

```{r}
Check_point("Are the base and out directories filled?")
# TODO make sure the directories are correct
base_dir = "../test"

out_dir = file.path(base_dir, "dieciseis_out")
```

```{r}
# Load tables
# ASV table
ASV_df = file.path(out_dir, "Test_run_ASV_table.tsv") %>% 
  read_tsv()

# Taxonomy table
merged_taxonomy_sp = file.path(out_dir, "Test_run_ASV_taxonomy.tsv") %>% 
  read_tsv()
```


*Importantly*,  the files with the full-length sequences of the 16S rRNA gene of
the members of the synthetic community are required. Make sure you are loading
the correct files, otherwise you will get an erroneous estimation of the abundance
of the species in your samples.

```{r}
Check_point("Is the path to the reference files correct?")
# Reference dbs
ref_dir = "../reference_files"

# Load reference files
# TODO make sure the corresponding taxonomy files are loaded
# This is only valid if using a defined community (e.g. Com20, EED)
SynthCom_species =  file.path(ref_dir, "COM21_GTDB_addSpecies.fna.gz")
SynthCom_ref_taxonomy = read_tsv(file.path(ref_dir, "COM21_GTDB_Taxonomy.txt")) %>%
  mutate(GTDB_Taxonomy = str_remove_all(GTDB_Taxonomy, "[a-z]__")) %>%
  separate(GTDB_Taxonomy, 
           into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
           sep = ";")
```


# Classify 

From here on, you shouldn't need to alter anything in the notebook. However, a
brief explanation of each of the steps will be provided.

To obtain an exact taxonomic classification of the ASVs generated by `DADA2` that
actually belong to the synthetic community, the nucleotide sequence of each ASV
is aligned against a database of full-length 16S rRNA gene sequences of all the 
expected members of the synthetic community.
```{r}
# Read fasta with full length 16S rRNA sequences of synth community species
SynthCom_full = SynthCom_species %>% 
  readDNAStringSet() %>% 
  as.character()

ASV_sequences = merged_taxonomy_sp$Seq
names(ASV_sequences) = merged_taxonomy_sp$ID

# Combine full and amplicon sequences
# Convert to DNA stringset
combined_stringset = c(ASV_sequences, SynthCom_full) %>% 
  DNAStringSet()

# Align sequences
combined_alignment = AlignSeqs(combined_stringset, verbose = FALSE)
```

It is also good to visualize the alignment to check whether there's anything
weird going on. In this case, it seems there are  a handful of ASVs that don't 
quite align. However, in general, the other sequences aligned well.
```{r fig.height=12, fig.width=18}
combined_alignment %>% 
  as.DNAbin() %>% 
  image.DNAbin()
```


Next, the distances between sequences are calculated. An ASV is assigned an
exact taxonomy at the species level if its nucleotide sequence is at least
97% similar to an entry in the database. Sequences that do not match any
microbe in the custom database are discarded.

```{r}
# Calculate pairwise distances
combined_distances = DistanceMatrix(combined_alignment)

# Extract distance matrix
# Long df 
# Fix names
# Arrange by distance
combined_distances_long = combined_distances %>% 
  as.matrix() %>% 
  as.data.frame() %>% 
  rownames_to_column("ASV_query") %>% 
  pivot_longer(cols = -ASV_query, names_to = "ASV_target", values_to = "Distance") %>%
  filter(str_detect(ASV_query, "ASV"), 
         !str_detect(ASV_target, "ASV")) %>% 
  mutate(ASV_target = word(ASV_target, start = 2, end = -1)) %>% 
  arrange(ASV_query, Distance)

# Filter to matches with 97 or higher identity
SynthCom_df_raw = combined_distances_long %>% 
  filter(Distance <= 0.03) %>% 
  group_by(ASV_query) %>% 
  slice(1) %>% 
  ungroup()

# Merge with taxonomy table and organize column order
SynthCom_df = SynthCom_df_raw  %>% 
  left_join(merged_taxonomy_sp, by = c("ASV_query" = "ID")) %>% 
  select(-Name) %>% 
  rename("Name" = "ASV_target", "ID" = "ASV_query") %>% 
  mutate(Species = word(Name, 2)) %>% 
  relocate(Distance, .after =  last_col()) %>% 
  arrange(ID)

SynthCom_df
```

At this point it is possible to have multiple ASVs with the same taxonomic
classification, for example, `ASV0001` and `ASV0004` both belong to Clostridium perfringens. This is normal and expected. This can happen due to errors during sequencing that introduce changes in the sequence of the ASV. Likewise, microbes 
can have multiple copies of the 16S rRNA gene which are not identical and each
ASV could represent a different copy. Finally, it could be due to limits in the method's ability to identify different sequences as member of a same ASV.

In any case, this will be addressed in the next step.

# Collapse abundances

Since synthetic communities are constructed from pure bacterial cultures (at 
least in theory), it is reasonable to assume that all ASVs with the exact same
taxonomic assignment belong to the same species and can be grouped together.
The following step adds up the abundances of all ASVs with the same taxonomic
label within a given sample. Continuing with the example above, if `Sample_1`
has 7 counts of `ASV0001` and 3 of `ASV0004`, both labeled Clostridium 
perfringens, then in the output table, Sample_1 will have a total of 10 counts
of C. perfringens

```{r}
# Taxonomy of each ASV from the synthetic community
SynthCom_taxonomy_collapse = SynthCom_df %>% 
  select(-c(md5, Seq)) %>% 
  distinct() %>% 
  arrange(Phylum, Class)

# Long format df with abundance and tax of each species on each sample
SynthCom_ASV_df = ASV_df %>% 
  pivot_longer(cols = -Sample, names_to = "ID", values_to = "Reads") %>% 
  filter(ID %in% SynthCom_taxonomy_collapse$ID) %>% 
  left_join(SynthCom_taxonomy_collapse, by = join_by("ID"))

# Add up abundances of each species on each sample
SynthCom_colapsed = SynthCom_ASV_df %>% 
  group_by(Sample, Name) %>% 
  summarize(Sum_reads = sum(Reads)) %>% 
  pivot_wider(id_cols = Sample, names_from = Name, values_from = Sum_reads) %>% 
  ungroup()

# Print
SynthCom_colapsed %>% 
  head()
```

# Proportion of reads from community

It is always good to check how many reads are mapping to actual members of the
synthetic community. We expect a very high proportion of reads mapping to the
expected species in the sample. If you get many reads that don't map to the species
you know are in your community, it might be a sign that something went wrong at
some point.
```{r}
# Total clear reads
Total_reads = ASV_df %>% 
  pivot_longer(-Sample) %>% 
  group_by(Sample) %>% 
  summarise(n_reads = sum(value))


# Total reads from community
Community_reads = SynthCom_colapsed %>% 
  pivot_longer(-Sample) %>% 
  group_by(Sample) %>% 
  summarise(comm_reads = sum(value))

# Join tables
Prop_reads = left_join(Total_reads, Community_reads, by = join_by(Sample))

# Calculate proportion
Prop_reads %>% 
  mutate(Same = (comm_reads/n_reads)*100)
```

# Write tables

Finally, the tables with the collapsed species abundances and taxonomic 
classification are written. As with some of the steps above, you need to make 
sure that the correct output directories and file names are specified

```{r}
# TODO Change the file names if needed
Check_point("Are the file names adjusted?")

# Give a name to your files
file_prefix = "Test_run"

out_collapsed_file = paste(file_prefix, "collapsed.tsv", sep = "_") %>% 
  file.path(out_dir, .)

out_synthcom_tax_file = paste(file_prefix, "exact_tax.tsv", sep = "_") %>% 
  file.path(out_dir, .)

write_tsv(SynthCom_colapsed, out_collapsed_file)
write_tsv(SynthCom_df, out_synthcom_tax_file)
```


